{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "f8c7cbce",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2024-07-25T01:40:08.453361Z",
     "iopub.status.busy": "2024-07-25T01:40:08.452994Z",
     "iopub.status.idle": "2024-07-25T01:40:09.636685Z",
     "shell.execute_reply": "2024-07-25T01:40:09.635333Z"
    },
    "papermill": {
     "duration": 1.193488,
     "end_time": "2024-07-25T01:40:09.639356",
     "exception": false,
     "start_time": "2024-07-25T01:40:08.445868",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import numpy as np \n",
    "import pandas as pd \n",
    "import os\n",
    "import scipy.special\n",
    "import matplotlib.pyplot\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "1aa25571",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-25T01:40:09.651873Z",
     "iopub.status.busy": "2024-07-25T01:40:09.651000Z",
     "iopub.status.idle": "2024-07-25T01:40:09.665313Z",
     "shell.execute_reply": "2024-07-25T01:40:09.663798Z"
    },
    "papermill": {
     "duration": 0.023072,
     "end_time": "2024-07-25T01:40:09.667799",
     "exception": false,
     "start_time": "2024-07-25T01:40:09.644727",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/mnist-in-csv/mnist_test.csv\n",
      "/kaggle/input/mnist-in-csv/mnist_train.csv\n"
     ]
    }
   ],
   "source": [
    "# Print available data in folders\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "55ee5547",
   "metadata": {
    "papermill": {
     "duration": 0.005041,
     "end_time": "2024-07-25T01:40:09.678164",
     "exception": false,
     "start_time": "2024-07-25T01:40:09.673123",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Neural network class will have at least 3 functions/methods: 1) Initialization, 2) Train, 3) Query"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "46c0e607",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-25T01:40:09.690825Z",
     "iopub.status.busy": "2024-07-25T01:40:09.690051Z",
     "iopub.status.idle": "2024-07-25T01:40:09.707248Z",
     "shell.execute_reply": "2024-07-25T01:40:09.706145Z"
    },
    "papermill": {
     "duration": 0.026187,
     "end_time": "2024-07-25T01:40:09.709666",
     "exception": false,
     "start_time": "2024-07-25T01:40:09.683479",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Neural network class definition\n",
    "class neuralNetwork:\n",
    "    \n",
    "    # Initialize the neural network\n",
    "    def __init__(self, inputnodes, hiddennodes, outputnodes, learningrate):\n",
    "        \n",
    "        # Nodes and layers\n",
    "        self.inodes = inputnodes\n",
    "        self.hnodes = hiddennodes\n",
    "        self.onodes = outputnodes\n",
    "        \n",
    "        # Learning rate\n",
    "        self.lr = learningrate\n",
    "        \n",
    "        # Link weight matrices wih and who\n",
    "        # Weights inside the arrays are w_i_j where link is from node i to node j in the next layer\n",
    "        # w11 w21 or w12 w22\n",
    "        self.wih_old = (np.random.rand(self.hnodes, self.inodes) - 0.5)\n",
    "        self.who_old = (np.random.rand(self.onodes, self.hnodes) - 0.5)\n",
    "        \n",
    "        # Optimized/more advanced link weight initialization method below\n",
    "        self.wih = np.random.normal(0, pow(self.inodes, -0.5), (self.hnodes, self.inodes))\n",
    "        self.who = np.random.normal(0, pow(self.hnodes, -0.5), (self.onodes, self.hnodes))\n",
    "        \n",
    "        # Activation function is the sigmoid function\n",
    "        self.activation_function = lambda x: scipy.special.expit(x)\n",
    "        \n",
    "        pass\n",
    "    \n",
    "    # Train the neural network\n",
    "    def train(self, inputs_list, targets_list):\n",
    "        # Convert inputs list and targets list to 2d array\n",
    "        inputs = np.array(inputs_list, ndmin=2).transpose()\n",
    "        targets = np.array(targets_list, ndmin=2).transpose()\n",
    "        # Calculate signals into hidden layer\n",
    "        hidden_inputs = np.dot(self.wih, inputs)\n",
    "        # Calculate signals emerging from hidden layer\n",
    "        hidden_outputs = self.activation_function(hidden_inputs)\n",
    "        # Calculate signals into final output layer\n",
    "        final_inputs = np.dot(self.who, hidden_outputs)\n",
    "        # Calculate signals emerging from final output layer\n",
    "        final_outputs = self.activation_function(final_inputs)\n",
    "        \n",
    "        # Backpropagation and gradient descent codes below\n",
    "        \n",
    "        # Calculate the errors\n",
    "        output_errors = targets - final_outputs\n",
    "        # Hidden layer error is output_errors, split by weights, recombined at hidden nodes\n",
    "        hidden_errors = np.dot(self.who.transpose(), output_errors)\n",
    "        \n",
    "        # Gradient Descent: Update the weights for the links between the hidden and output layers\n",
    "        self.who += self.lr * np.dot((output_errors * final_outputs * (1 - final_outputs)), np.transpose(hidden_outputs))\n",
    "        # Update the weights for the linkes between the input and hidden layers\n",
    "        self.wih += self.lr * np.dot((hidden_errors * hidden_outputs * (1 - hidden_outputs)), np.transpose(inputs))\n",
    "        \n",
    "        pass\n",
    "    \n",
    "    # Query the neural network\n",
    "    def query(self, inputs_list):\n",
    "        \n",
    "        # Convert inputs list to 2d array\n",
    "        inputs = np.array(inputs_list, ndmin=2).transpose()\n",
    "        # Calculate signals into hidden layer\n",
    "        hidden_inputs = np.dot(self.wih, inputs)\n",
    "        # Calculate signals emerging from hidden layer\n",
    "        hidden_outputs = self.activation_function(hidden_inputs)\n",
    "        # Calculate signals into final output layer\n",
    "        final_inputs = np.dot(self.who, hidden_outputs)\n",
    "        # Calculate signals emerging from final output layer\n",
    "        final_outputs = self.activation_function(final_inputs)\n",
    "        \n",
    "        # Convert the output to a simple form\n",
    "        final_outputs_simple = np.array2string(final_outputs, formatter={'float_kind':lambda x: \"%.6f\" % x})\n",
    "        \n",
    "        return final_outputs"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "43accb2c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-25T01:40:09.721770Z",
     "iopub.status.busy": "2024-07-25T01:40:09.721392Z",
     "iopub.status.idle": "2024-07-25T01:40:11.090667Z",
     "shell.execute_reply": "2024-07-25T01:40:11.089517Z"
    },
    "papermill": {
     "duration": 1.378415,
     "end_time": "2024-07-25T01:40:11.093419",
     "exception": false,
     "start_time": "2024-07-25T01:40:09.715004",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Read traning data\n",
    "train_data_file = open('/kaggle/input/mnist-in-csv/mnist_train.csv', 'r')\n",
    "train_data_list = train_data_file.readlines()\n",
    "train_data_file.close()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "402b3661",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-25T01:40:11.105776Z",
     "iopub.status.busy": "2024-07-25T01:40:11.105379Z",
     "iopub.status.idle": "2024-07-25T01:40:11.421783Z",
     "shell.execute_reply": "2024-07-25T01:40:11.420770Z"
    },
    "papermill": {
     "duration": 0.325416,
     "end_time": "2024-07-25T01:40:11.424301",
     "exception": false,
     "start_time": "2024-07-25T01:40:11.098885",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "length of input data row: 784\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<matplotlib.image.AxesImage at 0x7e7866b6fd30>"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Plot the data for one of the digits \n",
    "all_values = train_data_list[3].split(',')\n",
    "print('length of input data row:', len(all_values[1:]))\n",
    "image_array = np.asfarray(all_values[1:]).reshape((28, 28))\n",
    "matplotlib.pyplot.imshow(image_array, cmap='Greys', interpolation='None')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "6adf754e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-25T01:40:11.437321Z",
     "iopub.status.busy": "2024-07-25T01:40:11.436967Z",
     "iopub.status.idle": "2024-07-25T01:40:11.449970Z",
     "shell.execute_reply": "2024-07-25T01:40:11.448841Z"
    },
    "papermill": {
     "duration": 0.022513,
     "end_time": "2024-07-25T01:40:11.452579",
     "exception": false,
     "start_time": "2024-07-25T01:40:11.430066",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Create an instance of neural network \n",
    "input_nodes = 784\n",
    "hidden_nodes = 200\n",
    "output_nodes = 10\n",
    "learning_rate = 0.15\n",
    "\n",
    "# Create instance of neural network\n",
    "n = neuralNetwork(input_nodes, hidden_nodes, output_nodes, learning_rate)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "041eb370",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-25T01:40:11.466077Z",
     "iopub.status.busy": "2024-07-25T01:40:11.465434Z",
     "iopub.status.idle": "2024-07-25T01:44:53.163118Z",
     "shell.execute_reply": "2024-07-25T01:44:53.161695Z"
    },
    "papermill": {
     "duration": 281.709027,
     "end_time": "2024-07-25T01:44:53.167487",
     "exception": false,
     "start_time": "2024-07-25T01:40:11.458460",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Transform and scale training and target data, and train the model \n",
    "# The first record (first row of training file contains column headers for each pixel and should be excluded)\n",
    "# Epoch is the number of times the training data is used for training\n",
    "epochs = 3\n",
    "\n",
    "for e in range(epochs):\n",
    "    \n",
    "    for record in train_data_list[1:]:\n",
    "        # split the record by commas\n",
    "        all_values = record.split(',')\n",
    "        # scale and shift the inputs\n",
    "        inputs = (np.asfarray(all_values[1:]) / 255 * 0.99) + 0.01\n",
    "        # create the target output values \n",
    "        targets = np.zeros(output_nodes) + 0.01\n",
    "        # all_values[0] is the target label for this record\n",
    "        targets[int(all_values[0])] = 0.99\n",
    "\n",
    "        # Train the model\n",
    "        n.train(inputs, targets)\n",
    "        pass\n",
    "    \n",
    "    pass"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6c128256",
   "metadata": {
    "papermill": {
     "duration": 0.010577,
     "end_time": "2024-07-25T01:44:53.189911",
     "exception": false,
     "start_time": "2024-07-25T01:44:53.179334",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Test the model using test data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "4e3dcb30",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-25T01:44:53.214391Z",
     "iopub.status.busy": "2024-07-25T01:44:53.213753Z",
     "iopub.status.idle": "2024-07-25T01:44:53.742584Z",
     "shell.execute_reply": "2024-07-25T01:44:53.741536Z"
    },
    "papermill": {
     "duration": 0.544209,
     "end_time": "2024-07-25T01:44:53.745009",
     "exception": false,
     "start_time": "2024-07-25T01:44:53.200800",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "length of input data row: 784\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<matplotlib.image.AxesImage at 0x7e7866735420>"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Read the test data\n",
    "test_data_file = open('/kaggle/input/mnist-in-csv/mnist_test.csv', 'r')\n",
    "test_data_list = test_data_file.readlines()\n",
    "test_data_file.close()\n",
    "\n",
    "# Plot the test data for one of the digits \n",
    "all_values_test = test_data_list[10].split(',')\n",
    "print('length of input data row:', len(all_values_test[1:]))\n",
    "image_array = np.asfarray(all_values_test[1:]).reshape((28, 28))\n",
    "matplotlib.pyplot.imshow(image_array, cmap='Greys', interpolation='None')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "17b7b43d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-25T01:44:53.758363Z",
     "iopub.status.busy": "2024-07-25T01:44:53.758003Z",
     "iopub.status.idle": "2024-07-25T01:44:53.768433Z",
     "shell.execute_reply": "2024-07-25T01:44:53.767134Z"
    },
    "papermill": {
     "duration": 0.021604,
     "end_time": "2024-07-25T01:44:53.772687",
     "exception": false,
     "start_time": "2024-07-25T01:44:53.751083",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[0.00623547],\n",
       "       [0.00734678],\n",
       "       [0.00157685],\n",
       "       [0.00328224],\n",
       "       [0.07873137],\n",
       "       [0.00354872],\n",
       "       [0.00678928],\n",
       "       [0.01095165],\n",
       "       [0.01273301],\n",
       "       [0.98354323]])"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Predict/Query \n",
    "n.query((np.asfarray(all_values_test[1:]) / 255 * 0.99) + 0.01)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "52512c40",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-25T01:44:53.800663Z",
     "iopub.status.busy": "2024-07-25T01:44:53.800041Z",
     "iopub.status.idle": "2024-07-25T01:45:02.455458Z",
     "shell.execute_reply": "2024-07-25T01:45:02.454048Z"
    },
    "papermill": {
     "duration": 8.674625,
     "end_time": "2024-07-25T01:45:02.460030",
     "exception": false,
     "start_time": "2024-07-25T01:44:53.785405",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Test the neural network many times and create a scorecard\n",
    "scorecard = []\n",
    "\n",
    "# go through all the records in test data set\n",
    "for record in test_data_list[1:]: \n",
    "    all_values = record.split(',')\n",
    "    correct_label = int(all_values[0])\n",
    "    #print('Correct Label:', correct_label)\n",
    "    inputs = ((np.asfarray(all_values[1:]) / 255 * 0.99) + 0.01)\n",
    "    # Query the neural network\n",
    "    outputs = n.query(inputs)\n",
    "    # The index of the highest value corresponds to the label\n",
    "    label = np.argmax(outputs)\n",
    "    #print(\"Neural Network's Prediction:\", label)\n",
    "    # Append correct or incorrect to list\n",
    "    if (label == correct_label):\n",
    "        scorecard.append(1)\n",
    "    \n",
    "    else: \n",
    "        scorecard.append(0)\n",
    "        pass\n",
    "    \n",
    "    pass"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "ce8b3382",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-25T01:45:02.487959Z",
     "iopub.status.busy": "2024-07-25T01:45:02.487346Z",
     "iopub.status.idle": "2024-07-25T01:45:02.506102Z",
     "shell.execute_reply": "2024-07-25T01:45:02.504861Z"
    },
    "papermill": {
     "duration": 0.037094,
     "end_time": "2024-07-25T01:45:02.510158",
     "exception": false,
     "start_time": "2024-07-25T01:45:02.473064",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Scorecard Length: 10000\n",
      "Scorecard Mean: 0.9707\n",
      "Scorecard Performance: 0.9707\n"
     ]
    }
   ],
   "source": [
    "print('Scorecard Length:', len(scorecard))\n",
    "mean_score = sum(scorecard) / len(scorecard)\n",
    "print('Scorecard Mean:', mean_score)\n",
    "scorecard_array = np.asarray(scorecard)\n",
    "print('Scorecard Performance:', scorecard_array.sum() / scorecard_array.size)"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "datasetId": 27352,
     "sourceId": 34877,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 30746,
   "isGpuEnabled": false,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 297.514007,
   "end_time": "2024-07-25T01:45:03.049116",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2024-07-25T01:40:05.535109",
   "version": "2.5.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
